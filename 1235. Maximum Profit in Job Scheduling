class Solution {
    public int n;
    private int[]dp=new int[50001];
    public int getnext(int[][]array,int l,int target){
        int r=n-1;
        int res=n;
        while(l<=r){
            int mid=l+((r-l)/2);
            if(array[mid][0]>=target){
                res=mid;
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        return res;
    }
    public int find(int [][] array,int i){
        if(i>=n){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int next=getnext(array,i+1,array[i][1]);
        int pick=array[i][2]+find(array,next);
        int npick=find(array,i+1);
        return dp[i]=Math.max(pick,npick);
    }
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
         n=startTime.length;
        int[][] array = new int[n][3]; // {s, e, p}
         Arrays.fill(dp,-1);
        for (int i = 0; i < n; i++) {
            array[i][0] = startTime[i];
            array[i][1] = endTime[i];
            array[i][2] = profit[i];
        }
        Arrays.sort(array,(arr1,arr2)-> Integer.compare(arr1[0], arr2[0]));
        return find(array,0);
    }
}
